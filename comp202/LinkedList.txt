import java.util.LinkedList;

public class OpenAddressingLinkedListHashMap  extends AbstractHashMap{

  class Entry
  {
    String k;
    Integer v;
    
    Entry(String String, Integer Integer)
    {
      k = String;
      v = Integer;
    }
    
    public String toString()
    {
      return "(" + k.toString() + ", "+ v.toString() + ")";
    }
    
    boolean isDefunct()
    {
      return k == null && v == null;
    }
  }
  
  Entry defunct;
  private LinkedList<Entry>[] buckets;
  
  OpenAddressingLinkedListHashMap()
  {
    this(997, 0.6f);
  }
  
  OpenAddressingLinkedListHashMap(int initSize)
  {
    this(initSize, 0.6f);
  }
  
  OpenAddressingLinkedListHashMap(int initSize, float criticalAlpha)
  {
    cAlpha = criticalAlpha;
    defunct = new Entry(null,null);
    reset(initSize);
  }
  
  void reset(int size)
  {
    n = 0;
    N = size; 
    buckets = new LinkedList[N];//java.lang.reflect.Array.newInstance(cl, N); //
  }
  
  @Override
  public Integer get(String key) {
    int hash = hashKey(key);
    int i = 0;
    for(Entry e: buckets[hash]) {
    	if(e.k.equals(key))
    		return e.v;
    	i++;
    }
    return null;
  }

  @Override
  public boolean put(String key, Integer value) {
	  if(cAlpha > 0.6)
		  changeArraySize();

	  int hash = hashKey(key);
	  Entry e = new Entry(key, value);

	  if(buckets[hash] == null) 
		  buckets[hash] = new LinkedList<Entry>();
	  
	  int listIndex = isContains(buckets[hash], key);
	  
	  if(listIndex > -1) {
		  buckets[hash].set(listIndex, e);
	  } else {
		  buckets[hash].add(e);
		  n++;
		  cAlpha = n / N;
	  }
	  return true;
  }

  @Override
  public Integer remove(String key) {
	  int hash = hashKey(key);
	  int i = 0;
	  for(Entry e: buckets[hash]) {
		  if(e.k.equals(key)) {
			  int val = e.v;
			  buckets[hash].remove(i);
			  n--;
			  cAlpha = n / N;
			  return val;
		  }
		  i++;
	  }
	  return -1;
  }
  
  private int isContains(LinkedList<Entry> e, String k) {
	  int i = 0;
	  for(Entry ce: e) {
		  if(ce.k.equals(k))
			  return i;
		  i++;
	  }
	  return -1;
  }
  
  private void changeArraySize() {
	  N *= 2;
	  LinkedList<Entry>[] tempBuckets = new LinkedList[N];
	  for(int i = 0; i<buckets.length;i++) {
		  if(buckets[i] != null) {
			  for(int j = 0;j<buckets[i].size(); j++) {
				  Entry e = buckets[i].get(j);
				  int hash = hashKey(e.k);
				  if(tempBuckets[hash] == null) 
					  tempBuckets[hash] = new LinkedList<Entry>();
				  tempBuckets[hash].add(e);
			  }
		  }
	  }
	  buckets = tempBuckets;
  }
  
  private int hashKey(String key) {
	  int hash = hashValue(key);
	  return hash;
  }

}
